Problemset: https://toph.co/c/ada-lovelace-national-girls-2021-preliminary/booklet.pdf
B. And... Yet Another AND Problem

প্রব্লেমঃ 
ইনপুট হিসেবে একটা ইন্টিজার n দেয়া থাকবে। 
⇒ 2n সাইজের একটা অ্যারে a বানাইতে হবে।
⇒ অ্যারের প্রত্যেকটা এলিমেন্ট 0 থেকে 2ⁿ -1 পর্যন্ত হতে পারবে। [0 ≤ aⱼ  ≤ 2ⁿ - 1]
⇒ অ্যারে এমন হতে হবে যেন যেকোন k ( 0  ≤ k  ≤ 2ⁿ -1 )  এর জন্য অ্যারের এমন একটা সাবসিকুয়েন্স পাওয়া যায় যাতে ঐ সাবসিকুয়েন্স এর সব এলিমেন্ট কে Bitwise AND করলে এন্সার k আসে।

[ Limits 1s, 512 MB.  n এর মান 1 থেকে 18 হতে পারে।  
কয়েকটা উত্তর আসা সম্ভব হলে যেকোন একটা প্রিন্ট করলেই হবে। সবসময় অন্তত একটা এন্সার আসবেই। 
একটা অ্যারের সাবসিকুয়েন্স হতে পারে ঐ পুরা অ্যারে টাই, বা যেকোন সংখ্যক এলিমেন্ট বাদ দিয়ে পাওয়া নতুন অ্যারে (ইভেন সবগুলা এলিমেন্ট বাদ দিয়ে পাওয়া শূন্য [] অ্যারে ও একটা সাবসিকুয়েন্স) । তবে আমাদের প্রব্লেম ডেস্ক্রিপশন এ একটা জায়গায় “non-empty subsequence” টার্ম টা উল্লেখ আছে। তাই সেইফ থাকার জন্য আমরা ধরে নিলাম অন্তত একটা এলিমেন্ট থাকবে ঐ অ্যারে তে।     ]




সল্যুশনঃ

* প্রথমত, আমরা যদি ডেসিমালে 0 থেকে 2ⁿ -1 পর্যন্ত সংখ্যা বানাইতে চাই, তাইলে আমাদের বাইনারি তে কয়টা বিট লাগে আসলে? ⇒ n টা।
 ⇒  ইনপুট n হলে আমাদের n টা বিট লাগবে অ্যারের এলিমেন্ট গুলাকে বাইনারি তে রিপ্রেজেন্ট করার জন্য। আমরা অ্যারের এলিমেন্ট গুলাকে ডেসিমাল নাম্বার হিসেবে না দেখে বাইনারি রিপ্রেজেন্টেশন হিসেবেই দেখব।  
যেমনঃ অ্যারে তে n=2 এর জন্য 1,2,3,0 নিব মানে হল, 01,10,11,00 নিব। 
n=3 এর জন্য 1,2,3,5,6,7 নিব মানে হল, 001,010,011,101,110,111 নিব। 


* তার মানে এটা আমরা আপাতত শিওর, যে ওই অ্যারের প্রত্যেকটা এলিমেন্ট ই আমি n টা বিটের মাধ্যমে প্রকাশ করতে পারব।

* এখন আমার 2n সাইজের অ্যারে তে এমন সংখ্যাগুলা থাকতে হবে যাতে যেকোন k ( 0  ≤ k  ≤ 2ⁿ -1 )  এর জন্য অ্যারের এমন একটা সাবসিকুয়েন্স পাওয়া যায় যাতে ঐ সাবসিকুয়েন্স এর সব এলিমেন্ট এর 
  Bitwise AND এর এন্সার k আসে।

[এখানে অবশ্যই এটা ক্লিয়ার যে আমরা  0 থেকে 2ⁿ -1 পর্যন্ত সব সংখ্যা রাখতে পারব না যেহেতু আমাদের অ্যারের সাইজ মাত্র 2n এবং 2n << 2ⁿ -1 ]

* ওই সংখ্যাগুলা সিলেক্ট করাই মেইন কাজ এখন।




** কয়েকটা নাম্বারের বিটওয়াইজ অ্যান্ড যদি আমি k চাই, ধরলাম k এর বাইনারি রিপ্রেজেন্টেশন 1101. তাহলে আমার এমন নাম্বার লাগবে যাদের সবার 1,3,4 নাম্বার পজিশনে 1 আছে, আর অন্তত যেকোন 
   একটার 2 নাম্বার পজিশনে 0 আছে। এখানে খেয়াল রাখতে হবে, ঐ সংখ্যাগুলার প্রত্যেকটার ই অন্য কোন পজিশনে কিন্তু 0 থাকা যাবে না, থাকলে বিটওয়াইজ অ্যান্ড এ 1101 পাব না।  
   তো তাহলে “সবার 1,3,4 নাম্বার পজিশনে 1 আছে, আর অন্তত যেকোন একটার 2 নাম্বার পজিশনে 0 আছে” এই হিসাব মিলাতে গেলে তো 1101 নিজেকেই থাকতে হচ্ছে।
   যদি 1101 নিজেই অ্যারে তে থাকে, তাহলে তো শুধু ওকেই সাবসিকুয়েন্স ধরে k=1101₂ পাব।

   আসলে, যেকোন সংখ্যা যাদের বাইনারি রিপ্রেজেন্টেশন এ শুধু একটা 0 আছে, তাদের নিজেদের ওই অ্যারেতে থাকতেই হবে। কেননা ঐ সংখ্যা পেতে হলে আমার ঐ নির্দিষ্ট পজিশনেই শুধু 0 লাগবে, অন্যগুলাতে 1
   লাগবে, তার মানে আসলে ওই সংখ্যাকেই থাকতে হবে। 

   তো এরকম সংখ্যা কয়টা? যেহেতু n বিট, তাহলে একটা 0 বিশিষ্ট সংখ্যা হবে n টা। 
   n=3 হলে, 110, 101,011 

   তাহলে আমার 2n সংখ্যার মধ্যে অলরেডি nটা হয়ে গেল। 
  
   এই n টা সংখ্যা দিয়ে কিন্তু আমরা যেকোন পজিশনে 0 করতে পারি। যেমনঃ
   110 & 101 = 100, 110 & 011 = 010 , 110 & 101 & 011 = 000

** এরপর যদি আমার সব পজিশনেই 1 লাগে, এরকম একটা সংখ্যা রাখতে হবে, যেটা হল n টা 1. 
   n=3 এর জন্য 111.

   2n এর মধ্যে n+1 টা হয়ে গেল।

** আমাদের এই n+1 টা দিয়েই কাজ হয়ে যাবে, কেননা বিটওয়াইজ অ্যান্ড করে কোন একটা বাইনারি রিপ্রেজেন্টেশন পাওয়ার জন্য , আমরা প্রথমত n টা 1 বিশিষ্ট সংখ্যা ( যেমনঃ 111 ) নিয়ে রাখতে পারি, তারপর 
যেখানে যেখানে  0  দরকার হবে সেটার জন্য একদম প্রথমে পাওয়া n টা সংখ্যা থেকে সিলেক্ট করতে পারি (যেমনঃ দুই নাম্বার পজিশনে 0 চাইলে 101 নিব, এক আর দুই নাম্বার পজিশনে 0 চাইলে 101, 110 দুইটাই
নিব ইত্যাদি)


* বাকি 2n - (n+1) টা নাম্বার আমরা যেকোন কিছু রাখতে পারি, যেহেতু প্রব্লেম ডেস্ক্রিপশনে কোথাও বলা নাই যে সংখ্যাগুলা প্রত্যেকে আলাদা হইতে হবে। আর সাবসিকুয়েন্স নেয়ার সময় আমরা সেই এক্সট্রা নেয়া 
নাম্বার গুলা বাদ দিয়ে দিব :D 





* যেকোন একটা n এর জন্য কাজ করি।

n = 4:  তাহলে এখানে 4 বিট নিয়ে কাজ।

আমাদের প্রথমে দরকার একটা করে 0 আছে এমন n টা নাম্বার।

0111₂ = 7₁₀
1011₂ = 11₁₀
1101₂ = 13₁₀
1110₂ = 14₁₀


আর একটা দরকার n টা 1 বিশিষ্ট নাম্বার।

1111₂ = 15₁₀

বাকি 2*4 - (4+1) = 3 টা নাম্বার চাইলে সবগুলা 0 রাখা যায়।

তাহলে আমাদের n=4 এর জন্য 
2n সাইজের অ্যারে হবে [7,11,13,14,15,0,0,0]










 





